using Data.Entities;
using Data.Sorage;
using Microsoft.Extensions.DependencyInjection;
using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Types.ReplyMarkups;
using TgFilmsAndSerials;



namespace TgFilmsAndSerials.CommandHandler;

public class SettingsCommandHandler : ICommandHandler
{
    private readonly UserFilterStorage _filterStorage;
    private readonly IServiceProvider _serviceProvider;
    public SettingsCommandHandler(UserFilterStorage filterStorage, IServiceProvider serviceProvider)
    {
        _filterStorage = filterStorage;
        _serviceProvider = serviceProvider;
    }

    public string Command => "/settings";

    public async Task HandleAsync(string? args, TelegramBotClient bot, CallbackQuery? callbackQuery)
    {
        _filterStorage.Filters[callbackQuery.From.Id] = new UserFilter();

        await bot.EditMessageTextAsync(callbackQuery.Message.Chat.Id, callbackQuery.Message.MessageId, "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä—ã:",
            replyMarkup: new InlineKeyboardMarkup(new[]
            {
                new [] { InlineKeyboardButton.WithCallbackData("üé≠ –î—Ä–∞–º–∞", "genre:–¥—Ä–∞–º–∞") },
                new [] { InlineKeyboardButton.WithCallbackData("üò± –£–∂–∞—Å—ã", "genre:—É–∂–∞—Å—ã") },
                new [] { InlineKeyboardButton.WithCallbackData("üòÇ –ö–æ–º–µ–¥–∏—è", "genre:–∫–æ–º–µ–¥–∏—è") },
                new [] { InlineKeyboardButton.WithCallbackData("üëΩ –§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "genre:—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞") },
                new [] { InlineKeyboardButton.WithCallbackData("üïµÔ∏è‚Äç‚ôÇÔ∏è –î–µ—Ç–µ–∫—Ç–∏–≤", "genre:–¥–µ—Ç–µ–∫—Ç–∏–≤") },
                new [] { InlineKeyboardButton.WithCallbackData("üó°Ô∏è –ë–æ–µ–≤–∏–∫", "genre:–±–æ–µ–≤–∏–∫") },
                new [] { InlineKeyboardButton.WithCallbackData("üåÑ –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è", "genre:–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è") },
                new [] { InlineKeyboardButton.WithCallbackData("‚ù§Ô∏è –ú–µ–ª–æ–¥—Ä–∞–º–∞", "genre:–º–µ–ª–æ–¥—Ä–∞–º–∞") },
                new [] { InlineKeyboardButton.WithCallbackData("üìú –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π", "genre:–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π") },
                new [] { InlineKeyboardButton.WithCallbackData("üßô‚Äç‚ôÇÔ∏è –§—ç–Ω—Ç–µ–∑–∏", "genre:—Ñ—ç–Ω—Ç–µ–∑–∏") },
                new [] { InlineKeyboardButton.WithCallbackData("‚û° –î–∞–ª–µ–µ", "next:countries") },
            }));
    }

    public async Task HandleSelectionAsync(TelegramBotClient bot, CallbackQuery query)
    {
        var userId = query.From.Id;
        if (!_filterStorage.Filters.TryGetValue(userId, out var filter))
        {
            filter = new UserFilter();
            _filterStorage.Filters[userId] = filter;
        }

        if (query.Data.StartsWith("genre:"))
        {
            var genre = query.Data["genre:".Length..];
            if (!filter.Genres.Contains(genre))
                filter.Genres.Add(genre);
            await bot.AnswerCallbackQueryAsync(query.Id, $"–ñ–∞–Ω—Ä –¥–æ–±–∞–≤–ª–µ–Ω: {genre}");
        }
        else if (query.Data.StartsWith("country:"))
        {
            var country = query.Data["country:".Length..];
            if (!filter.Countries.Contains(country))
                filter.Countries.Add(country);
            await bot.AnswerCallbackQueryAsync(query.Id, $"–°—Ç—Ä–∞–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {country}");
        }
        else if (query.Data == "next:year")
        {
            await bot.EditMessageTextAsync(query.Message.Chat.Id, query.Message.MessageId, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –≥–æ–¥:",
                replyMarkup: new InlineKeyboardMarkup(new[]
                {
                    new[] { InlineKeyboardButton.WithCallbackData("2024", "year_from:2024") },
                    new[] { InlineKeyboardButton.WithCallbackData("2020", "year_from:2020") },
                    new[] { InlineKeyboardButton.WithCallbackData("2015", "year_from:2015") },
                    new[] { InlineKeyboardButton.WithCallbackData("2010", "year_from:2010") },
                    new[] { InlineKeyboardButton.WithCallbackData("2000", "year_from:2000") },
                }));
        }
        else if (query.Data.StartsWith("year_from:"))
        {
            if (int.TryParse(query.Data["year_from:".Length..], out var yearFrom))
            {
                filter.YearFrom = yearFrom;

                await bot.EditMessageTextAsync(query.Message.Chat.Id, query.Message.MessageId, $"–ì–æ–¥ –æ—Ç: {yearFrom}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—ã–π –≥–æ–¥:",
                    replyMarkup: new InlineKeyboardMarkup(new[]
                    {
                        new[] { InlineKeyboardButton.WithCallbackData("2024", "year_to:2024") },
                        new[] { InlineKeyboardButton.WithCallbackData("2020", "year_to:2020") },
                        new[] { InlineKeyboardButton.WithCallbackData("2015", "year_to:2015") },
                        new[] { InlineKeyboardButton.WithCallbackData("2010", "year_to:2010") },
                        new[] { InlineKeyboardButton.WithCallbackData("2000", "year_to:2000") },
                    }));
            }
        }
        else if (query.Data.StartsWith("year_to:"))
        {
            if (int.TryParse(query.Data["year_to:".Length..], out var yearTo))
            {
                filter.YearTo = yearTo;

                await bot.EditMessageTextAsync(query.Message.Chat.Id, query.Message.MessageId,
                    $"–í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥: {filter.YearFrom}-{filter.YearTo}",
                    replyMarkup: new InlineKeyboardMarkup(new[]
                    {
                        new[] { InlineKeyboardButton.WithCallbackData("üîç –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", "apply") },
                        new[] { InlineKeyboardButton.WithCallbackData("‚ùå –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä", "reset") }
                    }));
            }
        }

        else if (query.Data == "next:countries")
        {
            await bot.EditMessageTextAsync(query.Message.Chat.Id, query.Message.MessageId, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—ã:",
                replyMarkup: new InlineKeyboardMarkup(new[]
                {
                    new [] { InlineKeyboardButton.WithCallbackData("üá∫üá∏ –°–®–ê", "country:–°–®–ê") },
                    new [] { InlineKeyboardButton.WithCallbackData("üá∑üá∫ –†–æ—Å—Å–∏—è", "country:–†–æ—Å—Å–∏—è") },
                    new [] { InlineKeyboardButton.WithCallbackData("üá¨üáß –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è", "country:–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è") },
                    new [] { InlineKeyboardButton.WithCallbackData("üá´üá∑ –§—Ä–∞–Ω—Ü–∏—è", "country:–§—Ä–∞–Ω—Ü–∏—è") },
                    new [] { InlineKeyboardButton.WithCallbackData("üá∞üá∑ –Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è", "country:–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è") },
                    new [] { InlineKeyboardButton.WithCallbackData("üáØüáµ –Ø–ø–æ–Ω–∏—è", "country:–Ø–ø–æ–Ω–∏—è") },
                    new [] { InlineKeyboardButton.WithCallbackData("‚û° –î–∞–ª–µ–µ", "next:year") },
                }));

        }
        else if (query.Data == "next:year")
        {
            await bot.EditMessageTextAsync(query.Message.Chat.Id, query.Message.MessageId, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥:",
                replyMarkup: new InlineKeyboardMarkup(new[]
                {
                    new [] { InlineKeyboardButton.WithCallbackData("üá∫üá∏ –°–®–ê", "country:–°–®–ê") },
                    new [] { InlineKeyboardButton.WithCallbackData("üá∑üá∫ –†–æ—Å—Å–∏—è", "country:–†–æ—Å—Å–∏—è") },
                    new [] { InlineKeyboardButton.WithCallbackData("üá¨üáß –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è", "country:–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è") },
                    new [] { InlineKeyboardButton.WithCallbackData("üá´üá∑ –§—Ä–∞–Ω—Ü–∏—è", "country:–§—Ä–∞–Ω—Ü–∏—è") },
                    new [] { InlineKeyboardButton.WithCallbackData("üá∞üá∑ –Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è", "country:–Æ–∂–Ω–∞—è –ö–æ—Ä–µ—è") },
                    new [] { InlineKeyboardButton.WithCallbackData("üáØüáµ –Ø–ø–æ–Ω–∏—è", "country:–Ø–ø–æ–Ω–∏—è") },
                    new [] { InlineKeyboardButton.WithCallbackData("‚û° –î–∞–ª–µ–µ", "next:year") },
                }));
        }
        else if (query.Data == "apply")
        {
            //var args = $"{string.Join(",", filter.Genres)}|{string.Join(",", filter.Countries)}|{filter.Year}";

            var dispatcher = _serviceProvider.GetRequiredService<CommandDispatcher>();
            await dispatcher.DispatchAsync("/random", bot, query, null);
        }
        else if (query.Data == "reset")
        {
            _filterStorage.Filters.Remove(userId);
            await bot.AnswerCallbackQueryAsync(query.Id, "–§–∏–ª—å—Ç—Ä —Å–±—Ä–æ—à–µ–Ω.");
        }
    }
}

